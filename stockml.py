# -*- coding: utf-8 -*-
"""StockML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EHxNzkPOdsIYTeO_P7BXHE9R5ffzwRws
"""

# Description: This program uses an artificial recurrent neural network called Long Short Term Memory (LSTM) 
# to predict the closing stock price of a corporation (Apple Inc.) using the past 60 days stock price.

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.14.0

#Import the libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Get the stock quote
#df is data frame
df = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2020-04-06')

#Display the data
df

#Get the number of rows and columns in the data set
df.shape

#Visualize the closing price history
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price in USD ($)', fontsize=18)
plt.show();

#Create a new dataframe with only the 'Close column'
data = df.filter(['Close'])
#Convert the dataframe to a numpy array
dataset = data.values
#Get the number of rows to train the model on
training_data_len = math.ceil(len(dataset) * .8) #math.ceil to round it up

training_data_len

#Scale the data (to apply preprocessing transformation is good practice)
#Scaling the data values to be between 0 and 1 (min 0 max 1)
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#Create the training data set
#Create the scaled training data set
train_data = scaled_data[0:training_data_len, :]

#Split the data into x_train and y_train data sets
x_train = [] # independent training variables
y_train = [] # dependent training variables

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0]) #from position 0 to position 59, containing the past 60 values
  y_train.append(train_data[i, 0]) #from position 61, the one that we want our model to predict
  if i <= 60:
    print(x_train)
    print(y_train)
    print()

#Convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#Reshape the data (LSDM network expects the input to be 3-dimensional in the form of samples
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#Fit is another name for train
model.fit(x_train, y_train, batch_size=1, epochs=1)

#Create the testing data set
#Create a new array containing sclaed values from index 1543 to 2003
test_data = scaled_data[training_data_len - 60: , :]

#Create the data
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#Convert the data to a numpy array
x_test = np.array(x_test)

#Reshape the data (From 2D to 3D)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#Get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(((predictions-y_test)**2)))
rmse

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price in USD ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

#Show the valid and predicted prices
valid

#Get the quote
apple_quote = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2020-04-07')

#Create a new data frame
new_df = apple_quote.filter(['Close'])

#Get the last 60 day closing price values and convert the data frame to an array
last_60_days = new_df[-60:].values

#Scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)

#Create an empty list
X_test = []

#Append the past 60 days
X_test.append(last_60_days_scaled)

#Convert the X_test data set to a numpy array
X_test = np.array(X_test)

#Reshape the data
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

#Get the predicted scaled price
predicted_price = model.predict(X_test)

#Undo the scaling
predicted_price = scaler.inverse_transform(predicted_price)

print(predicted_price) #Predicted value for April 8 2020

#Get the quote
apple_quote2 = web.DataReader('AAPL', data_source='yahoo', start='2020-04-07', end='2020-04-07')
print(apple_quote2['Close'])